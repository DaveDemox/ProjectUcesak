Assignment Requirements and Progress

1. Create a diagram of schemas
   Status: ❌ Not Completed
   - Need to create visual diagram showing relationships between Category and Hairstyle schemas
   - Will show:
     * Category schema with attributes
     * Hairstyle schema with attributes
     * Relationships between schemas (references)

2. Describe each schema and its attributes
   Status: ✅ Completed
   - Category Schema:
     * id: Generated unique code (hex string)
     * name: Unique category name
   - Hairstyle Schema:
     * id: Generated unique code (hex string)
     * name: Hairstyle name
     * lengthCategoryId: Reference to length category
     * faceshapeCategoryId: Reference to faceshape category
     * note: Additional description
     * isLiked: Boolean indicating if hairstyle is liked

3. Describe DAO methods
   Status: ✅ Completed
   - Category DAO Methods:
     * create(categoryData) - Creates new category with validation
     * getById(id) - Retrieves category by ID
     * list() - Lists all categories
   - Hairstyle DAO Methods:
     * create(hairstyleData) - Creates new hairstyle with validation
     * getById(id) - Retrieves hairstyle by ID
     * list() - Lists all hairstyles
     * toggleLike(id) - Toggles hairstyle like status

4. Describe API endpoints (commands)
   Status: ✅ Completed
   - Category Endpoints:
     * GET /api/categories - List all categories
     * GET /api/categories/:id - Get specific category
     * POST /api/categories - Create new category
   - Hairstyle Endpoints:
     * GET /api/hairstyles - List all hairstyles
     * GET /api/hairstyles/:id - Get specific hairstyle
     * POST /api/hairstyles - Create new hairstyle
     * PATCH /api/hairstyles/:id/like - Toggle like status
   - Each endpoint includes:
     * Input/Output schemas
     * Validation using Ajv
     * Error handling

5. Create git repository and initialize project
   Status: ✅ Completed
   - Project initialized with npm
   - Basic structure created
   - Dependencies installed:
     * express
     * ajv
     * cors
     * nodemon (dev dependency)
   - File-based storage implemented

6. Develop the backend of the application
   Status: ✅ Completed
   - Project Structure:
     * server/
       - app.js (main application file)
       - controller/
       - abl/ (Application Business Logic)
         - category/
         - hairstyle/
       - dao/storage/
         - categoryList/
         - hairstyleList/
   - Implemented:
     * File-based storage system
     * DAO methods for both schemas
     * ABL layer with validation
     * Controllers with proper routing
     * Error handling
   - Storage:
     * Each entity stored as separate JSON file
     * Files named by entity ID

7. Push changes to git repository
   Status: ✅ Completed
   - Git repository initialized
   - .gitignore created
   - Initial commit made
   - Repository pushed to GitHub
   - URL: https://github.com/DaveDemox/ProjectUcesak

Next Steps:
1. Create schema diagram
2. Add testing
3. Add more detailed documentation
4. Consider adding:
   * Logging system
   * Rate limiting
   * API documentation (Swagger/OpenAPI) 