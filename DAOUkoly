Schema Examples:

const categorySchema = {
  id: "123", // generated unique code
  name: "Short", // unique category name
  length: "short", // length type: "short", "medium", "long"
  faceshape: "oval" // faceshape type: "oval", "square", "round"
};

const hairstyleSchema = {
  id: "1b30f251a2d7d9845cd44e6b5dd012c1", // generated unique code
  name: "Bob Cut", // hairstyle name
  lengthCategoryId: "123", // id of length category
  faceshapeCategoryId: "456", // id of faceshape category
  note: "Modern bob cut with layers", // additional description
  isLiked: true // boolean value indicating if hairstyle is liked (true by default, false when disliked)
};

Implementation Status:

✅ Hairstyle DAO Methods (Implemented):
1. create(hairstyleData)
   - Purpose: Create a new hairstyle
   - Parameters: hairstyleData (object containing hairstyle properties)
   - Returns: Promise<Hairstyle>
   - Implementation: Create new Hairstyle file and save to storage
   - Error Handling: Validates category existence, returns specific error codes

2. getById(id)
   - Purpose: Get a specific hairstyle by its ID
   - Parameters: id (string) - hairstyle ID
   - Returns: Promise<Hairstyle>
   - Implementation: Find hairstyle by ID and populate category references
   - Error Handling: Returns null if not found, specific error codes for file operations

3. listByCategory(lengthCategoryId, faceshapeCategoryId)
   - Purpose: Get all hairstyles matching specific length and faceshape categories
   - Parameters: 
     - lengthCategoryId (string) - Category ID for length
     - faceshapeCategoryId (string) - Category ID for faceshape
   - Returns: Promise<Hairstyle[]>
   - Implementation: Find hairstyles where both lengthCategoryId and faceshapeCategoryId match
   - Error Handling: Specific error codes for file operations

4. listByLengthCategoryId(lengthCategoryId)
   - Purpose: Get all hairstyles for a specific length category
   - Parameters: lengthCategoryId (string) - Category ID for length
   - Returns: Promise<Hairstyle[]>
   - Implementation: Find hairstyles where lengthCategoryId matches
   - Error Handling: Specific error codes for file operations

5. listByFaceshapeCategoryId(faceshapeCategoryId)
   - Purpose: Get all hairstyles for a specific faceshape category
   - Parameters: faceshapeCategoryId (string) - Category ID for faceshape
   - Returns: Promise<Hairstyle[]>
   - Implementation: Find hairstyles where faceshapeCategoryId matches
   - Error Handling: Specific error codes for file operations

6. toggleLike(id)
   - Purpose: Toggle the like status of a hairstyle
   - Parameters: id (string) - hairstyle ID
   - Returns: Promise<Hairstyle>
   - Implementation: 
     * Get hairstyle by ID
     * Toggle isLiked boolean value (true → false, false → true)
     * Save updated hairstyle
   - Error Handling:
     * Returns null if hairstyle not found
     * Specific error codes for file operations
   - Frontend Usage:
     * Hairstyles are visible by default (isLiked: true)
     * When disliked, isLiked becomes false and hairstyle can be hidden from dashboard
     * Toggling again will make the hairstyle visible again
   - Example:
     ```javascript
     // Initial state: { id: "123", isLiked: true } (visible in dashboard)
     await toggleLike("123");
     // After dislike: { id: "123", isLiked: false } (can be hidden from dashboard)
     await toggleLike("123");
     // After like: { id: "123", isLiked: true } (visible in dashboard again)
     ```

✅ Category DAO Methods (Implemented):
1. create(categoryData)
   - Purpose: Create a new category with unique name
   - Parameters: categoryData (object containing category properties)
   - Returns: Promise<Category>
   - Implementation: Create new Category file and save to storage
   - Error Handling: Validates properties, ensures unique name, specific error codes

2. getById(id)
   - Purpose: Get a specific category by its ID
   - Parameters: id (string) - category ID
   - Returns: Promise<Category>
   - Implementation: Find category by ID
   - Error Handling: Returns null if not found, specific error codes for file operations

3. list()
   - Purpose: Get all categories
   - Parameters: none
   - Returns: Promise<Category[]>
   - Implementation: Find all categories in storage
   - Error Handling: Specific error codes for file operations

4. getCategoryMap()
   - Purpose: Get a map of all categories
   - Parameters: none
   - Returns: Promise<Map<string, Category>>
   - Implementation: Create a map where key is category ID and value is category object
   - Error Handling: Specific error codes for file operations

✅ API Endpoints (Implemented):
1. GET /api/categories
   - Returns list of all categories
   - Response format: { itemList: Category[] }

2. GET /api/categories/:id
   - Returns specific category by ID
   - Response format: Category

3. POST /api/categories
   - Creates new category
   - Request body: categoryData
   - Response format: Category

4. GET /api/hairstyles
   - Returns list of all hairstyles
   - Optional query parameters: lengthCategoryId, faceshapeCategoryId
   - Response format: { itemList: Hairstyle[], categoryMap: Map<string, Category> }

5. GET /api/hairstyles/:id
   - Returns specific hairstyle by ID
   - Response format: Hairstyle

6. POST /api/hairstyles
   - Creates new hairstyle
   - Request body: hairstyleData
   - Response format: Hairstyle

Error Handling:
- All endpoints return appropriate HTTP status codes
- Specific error codes for validation and business logic errors
- Detailed error messages for debugging
- Proper error handling for file operations

Storage Structure:
- Categories stored in: src/dao/storage/categoryList/
- Hairstyles stored in: src/dao/storage/hairstyleList/
- Each entity stored as a separate JSON file
- File naming convention: {id}.json 